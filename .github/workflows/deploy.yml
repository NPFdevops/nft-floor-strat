name: Production Deployment Pipeline

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Quality Gates
  quality-checks:
    name: Quality & Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerabilities
        run: |
          npx audit-ci --config audit-ci.json || echo "Vulnerabilities found - review required"

      # - name: Lint code
      #   run: npm run lint

      # - name: Type checking
      #   run: npm run typecheck

      - name: Check bundle size
        run: |
          npm run build
          ls -la dist/
          
          # Check if bundle size is reasonable (example thresholds)
          echo "Checking bundle sizes..."
          find dist -name "*.js" -exec ls -lh {} \; | awk '{print $5 " " $9}' | head -10

  # Build Tests
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: quality-checks
    strategy:
      matrix:
        environment: [staging, production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application (${{ matrix.environment }})
        run: |
          if [ "${{ matrix.environment }}" == "production" ]; then
            npm run build:production
          else
            npm run build:staging
          fi
        env:
          NODE_ENV: ${{ matrix.environment }}

      - name: Test build artifacts
        run: |
          # Verify build artifacts exist
          test -f dist/index.html
          test -d dist/js
          test -d dist/css
          
          # Check for critical files
          echo "Build contents:"
          ls -la dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}
          path: dist/
          retention-days: 7

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel environment information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build project artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel (Staging)
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to: $url"

      - name: Health check (Staging)
        run: |
          sleep 30  # Wait for deployment to be ready
          curl -f ${{ steps.deploy.outputs.url }}/api/health || exit 1
          echo "Health check passed"

      - name: Comment PR with staging URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ Staging deployment ready: ${{ steps.deploy.outputs.url }}\n\n‚úÖ Health check passed\n‚è±Ô∏è Deployed at ${new Date().toISOString()}`
            })

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-test, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://www.nftstrategy.fun
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel environment information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build project artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel (Production)
        id: deploy-prod
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to production: $url"

      - name: Health check (Production)
        run: |
          sleep 45  # Wait longer for production deployment
          curl -f https://www.nftstrategy.fun/api/health || exit 1
          echo "Production health check passed"

      - name: Notify deployment success
        run: |
          echo "‚úÖ Production deployment successful!"
          echo "üåê URL: https://www.nftstrategy.fun"
          echo "üïê Deployed at: $(date -u)"

  # Post-deployment monitoring
  post-deployment-checks:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Extended health monitoring
        run: |
          echo "Running extended health checks..."
          
          # Multiple health checks over time
          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            curl -f https://www.nftstrategy.fun/api/health
            sleep 30
          done
          
          echo "All health checks passed!"

      - name: Performance check
        run: |
          echo "Checking basic performance metrics..."
          
          # Basic performance test using curl
          time curl -s https://www.nftstrategy.fun/ > /dev/null
          
          # Check API response time
          time curl -s https://www.nftstrategy.fun/api/health > /dev/null

      # - name: Notify Slack on success
      #   if: success()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: success
      #     channel: '#deployments'
      #     text: 'üöÄ Production deployment successful for NFT Floor Strategy Dashboard'
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # - name: Notify Slack on failure
      #   if: failure()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: failure
      #     channel: '#deployments'
      #     text: '‚ùå Production deployment failed for NFT Floor Strategy Dashboard'
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback capability
  rollback:
    name: Rollback (Manual Trigger)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: List recent deployments
        run: |
          vercel ls --token=${{ secrets.VERCEL_TOKEN }}

      - name: Rollback instructions
        run: |
          echo "‚ö†Ô∏è Manual rollback required"
          echo "Use: vercel rollback [deployment-url] --token=\$TOKEN"
          echo "Or use the Vercel dashboard for rollback"